import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import axios from "axios";

// PDF Download function
const handleDownload = (salary, period) => {
  if (!salary) return alert("Salary data not available");

  const manager = JSON.parse(localStorage.getItem("user"));
  const personName = manager?.name || "Unknown";

  const monthNames = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ];
  const monthName = monthNames[salary.month - 1] || "Unknown";

  const formatCurrency = (val) =>
    val !== undefined && val !== null ? `₹${val}` : "-";

  const doc = new jsPDF("p", "pt", "a4");
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  // Theme colors
  const blueColor = [0, 112, 192];
  const lightBlueColor = [240, 248, 255];
  const grayColor = [128, 128, 128];

  // Background
  doc.setFillColor(...lightBlueColor);
  doc.rect(0, 0, pageWidth, pageHeight, "F");

  // Outer border
  doc.setDrawColor(...blueColor);
  doc.setLineWidth(2);
  doc.rect(20, 20, pageWidth - 40, pageHeight - 40);

  // Title
  doc.setFontSize(24);
  doc.setFont("helvetica", "bold");
  doc.setTextColor(...blueColor);
  doc.text("LabourPro Salary Slip", pageWidth / 2, 60, { align: "center" });

  // Subtitle
  doc.setFontSize(12);
  doc.setTextColor(...grayColor);
  doc.text("Efficient Workforce Management", pageWidth / 2, 80, { align: "center" });

  // Employee details
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.setTextColor(...blueColor);
  doc.text("Employee Details", 40, 120);

  doc.setFont("helvetica", "normal");
  doc.setTextColor(0, 0, 0);
  doc.text(`Name: ${personName}`, 60, 150);
  doc.text(`Month/Year: ${monthName} ${salary.year}`, 60, 175);
  doc.text(`Manager ID: ${salary.managerId || "-"}`, 60, 200);

  // Separator
  doc.setDrawColor(...blueColor);
  doc.setLineWidth(1);
  doc.line(40, 220, pageWidth - 40, 220);

  // Salary table
  const startY = 250;
  const rowHeight = 30;
  const col1X = 60;
  const col2X = 350;
  const tableWidth = pageWidth - 100;

  const fields = [
    ["Base Salary", formatCurrency(salary.baseSalary)],
    ["Advance", formatCurrency(salary.advance)],
    ["Loan Taken", formatCurrency(salary.loanTaken)],
    ["Loan Paid", formatCurrency(salary.loanPaid)],
    ["Remaining Loan", formatCurrency((salary.loanTaken || 0) - (salary.loanPaid || 0))],
    ["Final Salary", formatCurrency(salary.finalSalary)],
  ];

  // Table header
  doc.setFont("helvetica", "bold");
  doc.setFillColor(...blueColor);
  doc.rect(col1X - 20, startY - 25, tableWidth, rowHeight, "F");
  doc.setTextColor(255, 255, 255);
  doc.text("Field", col1X, startY - 5);
  doc.text("Amount", col2X, startY - 5);

  // Table rows
  doc.setFont("helvetica", "normal");
  doc.setTextColor(0, 0, 0);
  fields.forEach((field, i) => {
    const y = startY + i * rowHeight;
    // Alternating row colors
    doc.setFillColor(i % 2 === 0 ? 255 : lightBlueColor[0], i % 2 === 0 ? 255 : lightBlueColor[1], i % 2 === 0 ? 255 : lightBlueColor[2]);
    doc.rect(col1X - 20, y - 20, tableWidth, rowHeight, "F");
    doc.setDrawColor(...blueColor);
    doc.rect(col1X - 20, y - 20, tableWidth, rowHeight);

    doc.text(field[0], col1X, y);
    doc.text(field[1]?.toString() || "-", col2X, y);
  });

  // Footer
  doc.setFontSize(10);
  doc.setFont("helvetica", "italic");
  doc.setTextColor(...grayColor);
  doc.text("Generated by LabourPro - All rights reserved", pageWidth / 2, pageHeight - 40, { align: "center" });

  // Save PDF
  const safeName = personName.replace(/\s+/g, "_");
  const fileName = `${safeName}_SalarySlip_${monthName}_${salary.year}.pdf`;
  doc.save(fileName);
};

const ManagerDashboard = () => {
  const [salaryData, setSalaryData] = useState({ current: null, previous: null });
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const manager = JSON.parse(localStorage.getItem("user")); // get manager info

  useEffect(() => {
    const fetchSalary = async () => {
      try {
        const token = localStorage.getItem("token");
        const managerId = localStorage.getItem("managerId");

        if (!token || !managerId) {
          alert("Session expired. Please login again.");
          navigate("/login");
          return;
        }

        const today = new Date();
        const currentMonth = today.getMonth() + 1;
        const currentYear = today.getFullYear();

        let prevMonth = currentMonth - 1;
        let prevYear = currentYear;
        if (prevMonth === 0) {
          prevMonth = 12;
          prevYear -= 1;
        }

        const currentRes = await axios.get(
          `https://labourpro-backend.onrender.com/api/salary/${managerId}/${currentMonth}/${currentYear}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );

        const previousRes = await axios.get(
          `https://labourpro-backend.onrender.com/api/salary/${managerId}/${prevMonth}/${prevYear}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );

        setSalaryData({
          current: currentRes.data,
          previous: previousRes.data,
        });
      } catch (err) {
        console.error("Error fetching salary:", err);
        alert("Failed to fetch salary. Please try again later.");
      } finally {
        setLoading(false);
      }
    };

    fetchSalary();
  }, [navigate]);

  const handleLogout = () => {
    localStorage.clear();
    navigate("/login");
  };

  if (loading) return <p className="text-center text-gray-500 text-lg">Loading salary data...</p>;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-8">
      <div className="max-w-6xl mx-auto bg-white rounded-2xl shadow-xl p-8 relative">
        <button
          onClick={handleLogout}
          className="absolute top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-300 shadow-md"
        >
          Logout
        </button>

        <h1 className="text-4xl font-bold text-center text-indigo-800 mb-10 tracking-wide">Manager Salary Details</h1>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Current Month Salary */}
          <div className="bg-gradient-to-br from-white to-blue-50 p-6 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-blue-100">
            <h2 className="text-2xl font-semibold text-indigo-700 mb-6 flex items-center gap-2">
              <svg className="w-6 h-6 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Current Month Salary
            </h2>
            {salaryData.current?.message ? (
              <p className="text-red-500 text-center italic">{salaryData.current.message}</p>
            ) : salaryData.current ? (
              <div className="space-y-3 text-gray-700">
                <p className="flex justify-between"><span className="font-medium">Manager Name:</span> {manager?.name || "N/A"}</p>
                <p className="flex justify-between"><span className="font-medium">Month/Year:</span> {salaryData.current.month}/{salaryData.current.year}</p>
                <p className="flex justify-between"><span className="font-medium">Manager ID:</span> {salaryData.current.managerId || "N/A"}</p>
                <p className="flex justify-between"><span className="font-medium">Base Salary:</span> ₹{salaryData.current.baseSalary || 0}</p>
                <p className="flex justify-between"><span className="font-medium">Advance:</span> ₹{salaryData.current.advance || 0}</p>
                <p className="flex justify-between"><span className="font-medium">Loan Taken:</span> ₹{salaryData.current.loanTaken || 0}</p>
                <p className="flex justify-between"><span className="font-medium">Loan Paid:</span> ₹{salaryData.current.loanPaid || 0}</p>
                <p className="flex justify-between"><span className="font-medium">Remaining Loan:</span> ₹{salaryData.current.loanRemaining || 0}</p>
                <p className="flex justify-between text-lg font-bold text-green-600"><span>Final Salary:</span> ₹{salaryData.current.finalSalary || 0}</p>
                <button
                  onClick={() => handleDownload(salaryData.current, "current")}
                  className="w-full bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-all duration-300 shadow-md mt-4"
                >
                  Download Current Slip
                </button>

              </div>
            ) : (
              <p className="text-gray-500 text-center italic">No salary data available for current month.</p>
            )}
          </div>

          {/* Previous Month Salary */}
          <div className="bg-gradient-to-br from-white to-blue-50 p-6 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-blue-100">
            <h2 className="text-2xl font-semibold text-indigo-700 mb-6 flex items-center gap-2">
              <svg className="w-6 h-6 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Previous Month Salary
            </h2>
            {salaryData.previous?.message ? (
              <p className="text-red-500 text-center italic">{salaryData.previous.message}</p>
            ) : salaryData.previous ? (
              <div className="space-y-3 text-gray-700">
                <p className="flex justify-between"><span className="font-medium">Manager Name:</span> {manager?.name || "N/A"}</p>
                <p className="flex justify-between"><span className="font-medium">Month/Year:</span> {salaryData.previous.month}/{salaryData.previous.year}</p>
                <p className="flex justify-between"><span className="font-medium">Manager ID:</span> {salaryData.previous.managerId || "N/A"}</p>
                <p className="flex justify-between"><span className="font-medium">Base Salary:</span> ₹{salaryData.previous.baseSalary || 0}</p>
                <p className="flex justify-between"><span className="font-medium">Advance:</span> ₹{salaryData.previous.advance || 0}</p>
                <p className="flex justify-between"><span className="font-medium">Loan Taken:</span> ₹{salaryData.previous.loanTaken || 0}</p>
                <p className="flex justify-between"><span className="font-medium">Loan Paid:</span> ₹{salaryData.previous.loanPaid || 0}</p>
                <p className="flex justify-between"><span className="font-medium">Remaining Loan:</span> ₹{salaryData.previous.loanRemaining || 0}</p>
                <p className="flex justify-between text-lg font-bold text-green-600"><span>Final Salary:</span> ₹{salaryData.previous.finalSalary || 0}</p>
                <button
                  onClick={() => handleDownload(salaryData.previous, "previous")}
                  className="w-full bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition duration-300 shadow-md mt-4"
                >
                  Download Previous Slip
                </button>
              </div>
            ) : (
              <p className="text-gray-500 text-center italic">No salary data available for previous month.</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ManagerDashboard;
