import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

const safeParse = (item) => {
  try { return JSON.parse(item); } catch { return null; }
};

// Translations object
const translations = {
  en: {
    welcome: (name) => `Hey, ${name}!`,
    currentMonth: "Current Month Salary",
    previousMonth: "Previous Month Salary",
    baseSalary: "Base Salary",
    advance: "Advance",
    loanTaken: "Loan Taken",
    loanPaid: "Loan Paid",
    remainingLoan: "Remaining Loan",
    finalSalary: "Final Salary",
    totalHours: "Total Hours",
    daysWorked: "Days Worked",
    download: (title) => `Download ${title} PDF`,
    noCurrent: "No current month salary available.",
    noPrevious: "No previous month salary available.",
    pdfTitle: "LabourPro Salary Slip",
    pdfEmployee: (name) => `Employee: ${name}`,
    pdfMonthYear: (month, year) => `Month/Year: ${month}/${year}`,
    pdfFooter: "Generated by LabourPro - www.labourpro.in",
    pdfField: "Field",
    pdfValue: "Value",
  },
  hi: {
    welcome: (name) => `नमस्ते, ${name}!`,
    currentMonth: "वर्तमान महीने का वेतन",
    previousMonth: "पिछले महीने का वेतन",
    baseSalary: "मूल वेतन",
    advance: "अग्रिम",
    loanTaken: "ऋण लिया गया",
    loanPaid: "ऋण चुकाया गया",
    remainingLoan: "शेष ऋण",
    finalSalary: "अंतिम वेतन",
    totalHours: "कुल घंटे",
    daysWorked: "काम किए गए दिन",
    download: (title) => `${title} PDF डाउनलोड करें`,
    noCurrent: "वर्तमान महीने का वेतन उपलब्ध नहीं है।",
    noPrevious: "पिछले महीने का वेतन उपलब्ध नहीं है।",
    pdfTitle: "लेबरप्रो वेतन पर्ची",
    pdfEmployee: (name) => `कर्मचारी: ${name}`,
    pdfMonthYear: (month, year) => `महीना/वर्ष: ${month}/${year}`,
    pdfFooter: "लेबरप्रो द्वारा उत्पन्न - www.labourpro.in",
    pdfField: "क्षेत्र",
    pdfValue: "मूल्य",
  },
  gu: {
    welcome: (name) => `હાય, ${name}!`,
    currentMonth: "વર્તમાન મહિનાનો પગાર",
    previousMonth: "પાછલા મહિનાનો પગાર",
    baseSalary: "મૂળ પગાર",
    advance: "અગાઉથી",
    loanTaken: "લોન લીધી",
    loanPaid: "લોન ચૂકવી",
    remainingLoan: "બાકી લોન",
    finalSalary: "અંતિમ પગાર",
    totalHours: "કુલ કલાક",
    daysWorked: "કામ કરેલા દિવસો",
    download: (title) => `${title} PDF ડાઉનલોડ કરો`,
    noCurrent: "વર્તમાન મહિનાનો પગાર ઉપલબ્ધ નથી।",
    noPrevious: "પાછલા મહિનાનો પગાર ઉપલબ્ધ નથી।",
    pdfTitle: "લેબરપ્રો પગાર સ્લિપ",
    pdfEmployee: (name) => `કર્મચારી: ${name}`,
    pdfMonthYear: (month, year) => `મહિનો/વર્ષ: ${month}/${year}`,
    pdfFooter: "લેબરપ્રો દ્વારા જનરેટેડ - www.labourpro.in",
    pdfField: "ક્ષેત્ર",
    pdfValue: "મૂલ્ય",
  },
};

const WorkerDashboard = () => {
  const navigate = useNavigate();
  const token = localStorage.getItem("token");
  const workerId = localStorage.getItem("workerId");
  const worker = safeParse(localStorage.getItem("user"));

  const [salaryData, setSalaryData] = useState({ current: null, previous: null });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [language, setLanguage] = useState("en"); // Default language: English

  useEffect(() => {
    if (!token || !workerId || !worker) {
      localStorage.clear();
      navigate("/login");
      return;
    }

    const fetchSalary = async () => {
      const today = new Date();
      let month = today.getMonth() + 1;
      let year = today.getFullYear();

      try {
        const res = await axios.get(
          `https://labourpro-backend.onrender.com/api/salary/worker/${workerId}/${month}/${year}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setSalaryData({ current: res.data });
      } catch (err) {
        if (month === 1) {
          month = 12;
          year -= 1;
        } else {
          month -= 1;
        }
        try {
          const resPrev = await axios.get(
            `https://labourpro-backend.onrender.com/api/salary/worker/${workerId}/${month}/${year}`,
            { headers: { Authorization: `Bearer ${token}` } }
          );
          setSalaryData({ current: resPrev.data });
        } catch (err2) {
          setError("No salary data available for current or previous month.");
        }
      } finally {
        setLoading(false);
      }
    };

    fetchSalary();
  }, [token, workerId, worker, navigate]);

  const handleLogout = () => {
    localStorage.clear();
    navigate("/login");
  };

  const handleDownload = (salary, workerName, lang) => {
    if (!salary) return;

    const t = translations[lang];

    const doc = new jsPDF("p", "pt", "a4");
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    // For Hindi and Gujarati, add a font that supports Devanagari script (assuming NotoSans is added; in practice, load via doc.addFont)
    // Note: In real code, you'd need to include font files and use doc.addFileToVFS and doc.addFont
    // For simplicity, assuming font is set to one that supports it, like 'NotoSans-Regular.ttf' for Devanagari.

    doc.setFontSize(24);
    doc.setFont("helvetica", "bold"); // Use appropriate font for lang
    doc.text(t.pdfTitle, pageWidth / 2, 60, { align: "center" });

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text(t.pdfEmployee(workerName), 40, 120);
    doc.text(t.pdfMonthYear(salary.month, salary.year), 40, 140);

    const tableColumn = [t.pdfField, t.pdfValue];
    const tableRows = [
      [t.baseSalary, `₹${salary.baseSalary}`],
      [t.advance, `₹${salary.advance}`],
      [t.loanTaken, `₹${salary.loanTaken}`],
      [t.loanPaid, `₹${salary.loanPaid}`],
      [t.remainingLoan, `₹${salary.loanRemaining}`],
      [t.finalSalary, `₹${salary.finalSalary}`],
      [t.totalHours, salary.totalHours || "-"],
      [t.daysWorked, salary.daysWorked || "-"],
    ];

    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 180,
      theme: "grid",
      styles: { halign: "left", valign: "middle" },
    });

    doc.setFontSize(10);
    doc.setFont("helvetica", "italic");
    doc.text(
      t.pdfFooter,
      pageWidth / 2,
      pageHeight - 20,
      { align: "center" }
    );

    doc.save(`${workerName.replace(/\s+/g, "_")}_SalarySlip_${salary.month}_${salary.year}.pdf`);
  };

  if (!worker) return <p>Session expired. Redirecting...</p>;
  if (loading) return <p className="text-center text-gray-500 text-lg">Loading...</p>;
  if (error) return <p className="text-red-500 text-center">{error}</p>;

  const { current, previous } = salaryData;
  const t = translations[language];

  const renderSalarySection = (salary, title) => (
    <div className="space-y-4">
      <h2 className="text-xl sm:text-2xl font-semibold text-indigo-700 mb-4 flex items-center gap-2">
        <svg className="w-5 h-5 sm:w-6 sm:h-6 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        {title} ({salary.month}/{salary.year})
      </h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 text-gray-700">
        {[
          { title: t.baseSalary, value: `₹${salary.baseSalary}` },
          { title: t.advance, value: `₹${salary.advance}` },
          { title: t.loanTaken, value: `₹${salary.loanTaken}` },
          { title: t.loanPaid, value: `₹${salary.loanPaid}` },
          { title: t.remainingLoan, value: `₹${salary.loanRemaining}` },
          { title: t.finalSalary, value: `₹${salary.finalSalary}` },
          { title: t.totalHours, value: salary.totalHours || "-" },
          { title: t.daysWorked, value: salary.daysWorked || "-" },
        ].map((item) => (
          <div key={item.title} className="p-4 bg-gradient-to-br from-white to-blue-50 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-blue-100">
            <h3 className="font-medium text-indigo-600 text-sm sm:text-base">{item.title}</h3>
            <p className="text-base sm:text-lg font-bold text-gray-800">{item.value}</p>
          </div>
        ))}
      </div>
      <button
        onClick={() => handleDownload(salary, worker.name, language)}
        className="w-full bg-green-500 text-white px-3 py-2 sm:px-4 sm:py-3 rounded-lg hover:bg-green-600 transition-all duration-300 shadow-md mt-3 sm:mt-4 text-sm sm:text-base font-semibold"
      >
        {t.download(title)}
      </button>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 sm:p-6 md:p-8 relative">
      <button
        onClick={handleLogout}
        className="fixed top-4 right-4 bg-transparent border border-red-500 text-red-500 px-3 py-1 sm:px-4 sm:py-2 rounded-md hover:bg-red-100 hover:text-red-600 transition duration-300 shadow-md text-sm sm:text-base z-10"
      >
        Logout
      </button>

      <div className="max-w-6xl mx-auto bg-white rounded-2xl shadow-xl p-4 sm:p-6 md:p-8 mt-16 sm:mt-0 space-y-8">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl sm:text-4xl font-bold text-center text-indigo-800 mb-8 sm:mb-10 tracking-wide">{t.welcome(worker.name)}</h1>
          <select
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            className="bg-white border border-indigo-300 text-indigo-700 px-3 py-1 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
          >
            <option value="en">English</option>
            <option value="hi">हिंदी</option>
            <option value="gu">ગુજરાતી</option>
          </select>
        </div>

        {current ? renderSalarySection(current, t.currentMonth) : <p className="text-gray-500 text-center italic text-sm sm:text-base">{t.noCurrent}</p>}
        {previous ? renderSalarySection(previous, t.previousMonth) : <p className="text-gray-500 text-center italic text-sm sm:text-base">{t.noPrevious}</p>}
      </div>
    </div>
  );
};

export default WorkerDashboard;
